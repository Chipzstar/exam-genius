generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["driverAdapters"]
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DATABASE_URL_UNPOOLED")
}

model Course {
    id         Int       @id(map: "idx_25060_primary") @default(autoincrement())
    course_id  String    @unique(map: "idx_25060_course_course_id_key") @db.VarChar(191)
    user_id    String    @db.VarChar(191)
    user       User      @relation(fields: [user_id], references: [clerk_id], onDelete: Cascade)
    code       String?   @db.VarChar(191)
    exam_board ExamBoard
    year_level Int
    product_id String?   @db.VarChar(191)
    subject    Subject
    name       String    @db.VarChar(191)
    created_at DateTime  @default(now()) @db.Timestamptz(6)
    updated_at DateTime  @updatedAt @db.Timestamptz(6)
    papers     Paper[]

    @@index([user_id], map: "idx_25060_course_user_id_idx")
}

model Paper {
    id           Int       @id(map: "idx_25068_primary") @unique(map: "idx_25068_paper_id_key") @default(autoincrement())
    paper_id     String    @unique(map: "idx_25068_paper_paper_id_key") @db.VarChar(191)
    user_id      String    @db.VarChar(191)
    user         User      @relation(fields: [user_id], references: [clerk_id], onDelete: Cascade)
    course_id    String    @db.VarChar(191)
    course       Course    @relation(fields: [course_id], references: [course_id], onDelete: Cascade)
    name         String    @db.VarChar(191)
    paper_code   String    @db.VarChar(191)
    content      String
    exam_board   ExamBoard
    subject      Subject
    paper_number Int       @default(1)
    unit_name    String    @db.VarChar(191)
    status       Status    @default(pending)
    created_at   DateTime  @default(now()) @db.Timestamptz(6)
    updated_at   DateTime  @updatedAt @db.Timestamptz(6)

    @@index([user_id, course_id], map: "idx_25068_paper_user_id_course_id_idx")
}

model StripeEvent {
    id               String   @id(map: "idx_25077_primary") @unique(map: "idx_25077_stripeevent_id_key") @db.VarChar(191)
    api_version      String?  @db.VarChar(191)
    data             Json     @db.Json
    request          Json?    @db.Json
    type             String   @db.VarChar(191)
    object           String   @db.VarChar(191)
    account          String?  @db.VarChar(191)
    created          DateTime @db.Timestamptz(6)
    livemode         Boolean
    pending_webhooks Int
}

model User {
    id                         Int                       @id(map: "idx_25083_primary") @default(autoincrement())
    email                      String                    @unique(map: "idx_25083_user_email_key") @db.VarChar(191)
    full_name                  String                    @db.VarChar(191)
    year                       String?                   @db.VarChar(191)
    role                       String?                   @db.VarChar(191)
    firstname                  String                    @db.VarChar(191)
    lastname                   String                    @db.VarChar(191)
    stripe_customer_id         String?                   @unique(map: "idx_25083_user_stripe_customer_id_key") @db.VarChar(191)
    stripe_subscription_id     String?                   @db.VarChar(191)
    stripe_subscription_status StripeSubscriptionStatus?
    clerk_id                   String                    @unique(map: "idx_25083_user_clerk_id_key") @default("") @db.VarChar(191)
    courses                    Course[]
    papers                     Paper[]
}

enum ExamBoard {
    edexcel
    aqa
    ocr
}

enum Status {
    failed
    pending
    success
}

enum Subject {
    maths
    biology
    chemistry
    economics
    physics
    psychology
}

enum StripeSubscriptionStatus {
    incomplete
    incomplete_expired
    trialing
    active
    past_due
    canceled
    unpaid
    paused
}
